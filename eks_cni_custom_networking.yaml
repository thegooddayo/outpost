# Replace this section with the output from terraform

#apiVersion: crd.k8s.amazonaws.com/v1alpha1
#kind: ENIConfig
#metadata:
#  name: eu-central-1a
#spec:
#  subnet: subnet-07a7b9b6ef2e950d2
#  securityGroups:
#    - sg-0f7b1d79155cb316a
#    - sg-0239jf0s01lalmb44
#---
#apiVersion: crd.k8s.amazonaws.com/v1alpha1
#kind: ENIConfig
#metadata:
#  name: eu-central-1b
#spec:
#  subnet: subnet-02975326dd53e0455
#  securityGroups:
#    - sg-0f7b1d79155cb316a
#    - sg-0239jf0s01lalmb44
---
apiVersion: v1
kind: Namespace
metadata:
  name: custom-cni
  labels:
    app.kubernetes.io/name: custom-cni
    app.kubernetes.io/instance: custom-cni
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: custom-cni-cron-role
subjects:
- kind: ServiceAccount
  name: custom-cni-cron-role
  namespace: custom-cni
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: custom-cni-cron-role
  namespace: custom-cni
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: custom-cni
  namespace: custom-cni
spec:
  schedule: "0 0 * * *"      # This sets the cron job to execute once per day at midnight. This job is used to make the custom cni setting "immutable". You can alter this as required.
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: custom-cni-cron-role
          containers:
          - name: custom-cni
            image: git.nasdaq.com/containers/dependency_proxy/containers/bitnami/kubectl
            imagePullPolicy: IfNotPresent
            command: [ "/bin/sh", "-c" ]
            args:
              - echo "get eniconfig version";
                kubectl describe daemonset aws-node --namespace kube-system | grep Image | cut -d "/" -f 2;

                echo "check eni config label definition";
                kubectl describe daemonset -n kube-system aws-node | grep ENI_CONFIG_LABEL_DEF;
                label_def="failure-domain.beta.kubernetes.io/zone";
                kubectl set env daemonset aws-node -n kube-system ENI_CONFIG_LABEL_DEF="$label_def";
                kubectl describe daemonset -n kube-system aws-node | grep ENI_CONFIG_LABEL_DEF;

                echo "check custom cni networking status";
                kubectl describe daemonset -n kube-system aws-node | grep AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG;
                echo "Enable custom cni networking";
                kubectl set env daemonset aws-node -n kube-system AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG=true;
                echo "check custom cni networking status";
                kubectl describe daemonset -n kube-system aws-node | grep AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG;

          restartPolicy: OnFailure
---
apiVersion: batch/v1
kind: Job
metadata:
  name: custom-cni-one-off
  namespace: custom-cni
spec:
  template:
    spec:
      serviceAccountName: custom-cni-cron-role
      containers:
        - name: custom-cni-one-off
          image: git.nasdaq.com/containers/dependency_proxy/containers/bitnami/kubectl
          imagePullPolicy: IfNotPresent
          command: [ "/bin/sh", "-c" ]
          args:
            - echo "get eniconfig version";
              kubectl describe daemonset aws-node --namespace kube-system | grep Image | cut -d "/" -f 2;

              echo "check eni config label definition";
              kubectl describe daemonset -n kube-system aws-node | grep ENI_CONFIG_LABEL_DEF;
              label_def="failure-domain.beta.kubernetes.io/zone";
              kubectl set env daemonset aws-node -n kube-system ENI_CONFIG_LABEL_DEF="$label_def";
              kubectl describe daemonset -n kube-system aws-node | grep ENI_CONFIG_LABEL_DEF;

              echo "check custom cni networking status";
              kubectl describe daemonset -n kube-system aws-node | grep AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG;
              echo "Enable custom cni networking";
              kubectl set env daemonset aws-node -n kube-system AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG=true;
              echo "check custom cni networking status";
              kubectl describe daemonset -n kube-system aws-node | grep AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG;

      restartPolicy: OnFailure
  backoffLimit: 4  # how many times it will re-attempt if it would fail.